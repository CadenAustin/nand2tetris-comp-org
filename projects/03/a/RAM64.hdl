// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // BASE+1 LEVEL RAM, DMUX for Loading, Mux for Output

    DMux8Way(in=load, sel=address[3..5], a=dmux0, b=dmux1, c=dmux2, d=dmux3, e=dmux4, f=dmux5, g=dmux6, h=dmux7);

    RAM8(in=in, address=address[0..2], load=dmux0, out=reg0);
    RAM8(in=in, address=address[0..2], load=dmux1, out=reg1);
    RAM8(in=in, address=address[0..2], load=dmux2, out=reg2);
    RAM8(in=in, address=address[0..2], load=dmux3, out=reg3);
    RAM8(in=in, address=address[0..2], load=dmux4, out=reg4);
    RAM8(in=in, address=address[0..2], load=dmux5, out=reg5);
    RAM8(in=in, address=address[0..2], load=dmux6, out=reg6);
    RAM8(in=in, address=address[0..2], load=dmux7, out=reg7);
                
    Mux8Way16(a=reg0, b=reg1, c=reg2, d=reg3, e=reg4, f=reg5, g=reg6, h=reg7, sel=address[3..5], out=out);
}
